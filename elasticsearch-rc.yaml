heat_template_version: 2013-05-23

description: |
  Multiple Linux servers running an
  [Elasticsearch](http://www.elasticsearch.org/) cluster.

parameter_groups:

- label: Server Settings
  parameters:
  - flavor
  - es_node_count

- label: Elasticsearch Settings
  parameters:
  - es_auth_user
  - es_version

- label: RackConnect Settings
  parameters:
  - rc_network_name

- label: rax-dev-params
  parameters:
  - load_balancer_hostname
  - server_hostname
  - child_template
  - kitchen
  - chef_version
  - ansible_source
  - loadbalancer_flavor

parameters:

  flavor:
    label: Server Size
    description: |
      Rackspace Cloud Server flavor to use. The size is based on the amount of
      RAM for the provisioned server.
    type: string
    default: 2 GB General Purpose v1
    constraints:
    - allowed_values:
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
      - 15 GB I/O v1
      - 30 GB I/O v1
      - 512MB Standard Instance
      - 1GB Standard Instance
      - 2GB Standard Instance
      - 4GB Standard Instance
      - 8GB Standard Instance
      - 15GB Standard Instance
      - 30GB Standard Instance
      description: |
        Must be a valid Rackspace Cloud Server flavor for the region you have
        selected to deploy into.

  load_balancer_hostname:
    label: Load Balancer Name
    description: Hostname for load balancer
    type: string
    default: elasticsearch-lb

  server_hostname:
    label: Server Name
    description: Hostname for the servers
    type: string
    default: elasticsearch-%index%

  es_node_count:
    label: Number of Servers
    description: Number of Elasticsearch nodes to create
    type: number
    default: 2

  es_auth_user:
    label: Username
    description: |
      User name for authentication with the Elasticsearch endpoint. A password
      will be automatically generated.
    type: string
    default: es_user

  es_version:
    label: Elasticsearch version
    description: |
      Version of Elasticsearch to install.
    type: string
    default: 1.4.4
    constraints:
    - allowed_values:
      - 0.90.13
      - 1.0.3
      - 1.1.2
      - 1.2.3
      - 1.3.9
      - 1.4.4

  child_template:
    label: Child Template
    description: |
      URL to the Child template that will provision Elasticsearch nodes.
    type: string
    default: https://raw.githubusercontent.com/rackspace-orchestration-templates/elasticsearch-rc/master/elasticsearch_node-rc.yaml

  kitchen:
    label: Kitchen
    description: URL for the kitchen to use
    type: string
    default: https://github.com/rackspace-orchestration-templates/elasticsearch-rc

  chef_version:
    label: Chef Version
    description: Version of chef client to use
    type: string
    default: 12.3.0

  rc_network_name:
    type: string
    label: RackConnect Network
    description: Name or UUID of RackConnected network to attach this server to
    constraints:
    - custom_constraint: rackconnect.network
    immutable: true

  ansible_source:
    type: string
    default: http://catalog.rs-heat.com/ansible-roles/ansible-roles.tar.gz
    label: Ansible Tarball
    description: The Ansible Roles will be pulled from the location provided
    immutable: true

  loadbalancer_flavor:
    type: string
    default: 2 GB General Purpose v1
    label: Server Flavor
    description: Flavor of Cloud Server to use for Drupal
    constraints:
    - allowed_values:
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
    immutable: true
resources:

  ssh_key:
    type: "OS::Nova::KeyPair"
    properties:
      name: { get_param: "OS::stack_id" }
      save_private_key: true

  es_password:
    type: OS::Heat::RandomString
    properties:
      length: 16
      sequence: lettersdigits

  es_nodes:
    type: "OS::Heat::ResourceGroup"
    properties:
      count: { get_param: es_node_count }
      resource_def:
        type: { get_param: child_template }
        properties:
          stack_id:         { get_param: "OS::stack_id" }
          flavor:           { get_param: flavor }
          server_hostname:  { get_param: server_hostname }
          ssh_keypair_name: { get_resource: ssh_key }
          ssh_private_key:  { get_attr: [ssh_key, private_key] }
          es_password:      { get_attr: [es_password, value] }
          es_auth_user:     { get_param: es_auth_user }
          es_version:       { get_param: es_version }
          kitchen:          { get_param: kitchen }
          chef_version:     { get_param: chef_version }
          rc_network_name:  { get_param: rc_network_name }

  #nginx load balancer
  upload_lb_role_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: results
      config:
        str_replace:
          template: |
            #!/bin/bash
            set -e
            mkdir -p /etc/ansible/roles
            wget ansible_source -O /tmp/ansible-roles.tar.gz 2>&1
            tar -xf /tmp/ansible-roles.tar.gz --strip-components=1 -C /etc/ansible/roles
          params:
            ansible_source: { get_param: ansible_source }
  deploy_lb_roles:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config:
        get_resource: upload_lb_role_config
      server:
        get_resource: load_balancer
  deploy_loadbalancer:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy_lb_roles
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        nginx_vhost_str: "LOAD_BALANCER"
        nginx_vhost_template: "loadbalancer"
        nginx_upstream_server: { get_attr: [es_nodes, networks, { get_param: rc_network_name}, 0] }
        nginx_lb_nodes: { get_attr: [es_nodes, es_server_ip] }
        firewall_global_rules: [ "0.0.0.0,0,22,tcp", "0.0.0.0,0,8080,tcp"]
      config:
        get_resource: loadbalancer_config
      server:
        get_resource: load_balancer
  loadbalancer_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
      - default: "[]"
        name: nginx_lb_nodes
        type: CommaDelimitedList
      - default: "[]"
        name: firewall_global_rules
        type: CommaDelimitedList
      config: |
        ---
        - name: Install and configure nginx as Load Balancer
          hosts: localhost
          connection: local
          roles:
          - nginx
          - firewall
  load_balancer:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: stack_Load_Balancer
          params:
            stack: { get_param: "OS::stack_name" }
      image: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM) (Orchestration)
      flavor: { get_param: loadbalancer_flavor }
      key_name: { get_resource: ssh_key }
      software_config_transport: POLL_TEMP_URL
      config_drive: true
      user_data_format: SOFTWARE_CONFIG
      networks:
      - network: { get_param: rc_network_name }
      - network: 11111111-1111-1111-1111-111111111111
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        build_config: "monitoring_agent_only"
  load_balancer_public_ip:
    type: Rackspace::RackConnect::PublicIP
    depends_on:
    - load_balancer
    properties:
      server_id: { get_resource: load_balancer }

outputs:
  private_key:
    value: { get_attr: [ssh_key, private_key] }
    description: "SSH Private Key"

  es_auth_user:
    value: { get_param: es_auth_user }
    description: "Elasticsearch Admin User"

  es_password:
    value: { get_attr: [es_password, value] }
    description: "Elasticsearch Admin Password"

  load_balancer_ip:
    value: { get_attr: [load_balancer, accessIPv4] }
    description: "Load Balancer IP"

  es_server_ips:
    value: { get_attr: [es_nodes, es_server_ip] }
    description: "Elasticsearch Server IPs"

  es_url:
    description: Elasticsearch URL
    value:
      str_replace:
        template: "http://%server_ip%:8080"
        params:
          "%server_ip%": { get_attr: [load_balancer, accessIPv4] }
